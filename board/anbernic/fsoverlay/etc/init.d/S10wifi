#!/bin/sh
#
# Prepare wifi even if /userdata isn't mounted
# This service relies on S65values4boot 

# Only init wifi on start condition
[ "$1" = "start" ] || exit 0

BATOCONF="/userdata/system/anbernic.conf"
BOOTCONF="/boot/anbernic-boot.conf"

# if /userdata is not yet available
if ! [ -f "$BATOCONF" ]; then
  # use the boot version of the file
  BATOCONF="$BOOTCONF"
fi

# WLAN enabled?
settingsWlan="$(anbernic-settings "$BATOCONF" -command load -key wifi.enabled)"
if [ "$settingsWlan" != "1" ];then
#echo 113 > /sys/class/gpio/export
#GPIO113=$(cat /sys/class/gpio/gpio113/value)
#if [ "$GPIO113" == "1" ];then
#	echo out > /sys/class/gpio/gpio113/direction
#	echo 0 > /sys/class/gpio/gpio113/value
#	echo 113 > /sys/class/gpio/unexport		
#fi
    exit 0
fi

echo 113 > /sys/class/gpio/export
GPIO113=$(cat /sys/class/gpio/gpio113/value)
if [ "$GPIO113" == "0" ];then
	echo out > /sys/class/gpio/gpio113/direction
	echo 1 > /sys/class/gpio/gpio113/value
	echo 113 > /sys/class/gpio/unexport
	sleep 2
fi

anbernic_wifi_configure() {
    X=$1

    settings_hide=false; settings_name="${X}"
    [ "$X" = "1" ] && { X=; settings_name=default; }
    [ "$X" = ".hidden" ] && { settings_name=hidden_AP; settings_hide=true; }
    
    settings_ssid="$(anbernic-settings "$BATOCONF" -command load -key wifi${X}.ssid)"
    settings_key="$(anbernic-settings "$BATOCONF" -command load -key wifi${X}.key)"
    settings_file="/var/lib/connman/anbernic_wifi${X}.config"

    if [ -n "$settings_ssid" ];then
        mkdir -p "/var/lib/connman"
        cat > "${settings_file}" <<-_EOF_
		[global]
		Name=anbernic
		[service_anbernic_${settings_name}]
		Type=wifi
		Name=${settings_ssid}
		Hidden=${settings_hide}
		Passphrase=${settings_key}
	_EOF_

    connmanctl enable wifi || return 1
    connmanctl scan   wifi || return 1
    return 0

    fi
}

# Start wifi configuration
# Soft unblock wifi
rfkill unblock wifi

for i in 1 2 3 .hidden
do
    anbernic_wifi_configure $i &
    ret=$?
done
exit $ret
